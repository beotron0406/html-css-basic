/**
 * @jsxRuntime classic
 */
/** @jsx jsx */

// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css, jsx } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
const heights = {
  default: `${32 / 14}em`,
  compact: `${24 / 14}em`,
  none: 'auto'
};
import { SplitButtonContext } from './split-button-context';
import { getActions } from './utils';
const baseDividerStyles = css({
  width: "var(--ds-border-width, 1px)",
  position: 'relative',
  // This is 1 so it appears above buttons by default.
  // When buttons are selected they have a zIndex of 2 applied.
  // See use-button-base.tsx.
  zIndex: 1
});
const defaultDividerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  height: heights.default
});
const compactDividerStyles = css({
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  height: heights.compact
});
const dividerDisabledStyles = css({
  backgroundColor: "var(--ds-text-disabled, #091E4224)",
  cursor: 'not-allowed',
  opacity: 0.51
});
const dividerDisabledRefreshedStyles = css({
  backgroundColor: "var(--ds-border-disabled, #091E4224)",
  cursor: 'not-allowed'
});
const dividerAppearance = {
  default: css({
    backgroundColor: "var(--ds-text, #172B4D)",
    opacity: 0.51
  }),
  primary: css({
    backgroundColor: "var(--ds-text-inverse, #FFF)",
    opacity: 0.64
  }),
  navigation: css({
    height: '16px',
    margin: `${"var(--ds-space-100, 8px)"} -0.5px`,
    backgroundColor: "var(--ds-text-subtle, #0052cc)",
    opacity: 0.62
  })
};
const dividerRefreshedOffsetStyles = css({
  marginInline: `calc(0px - ${"var(--ds-border-width, 1px)"})`
});
const dividerHeight = {
  default: defaultDividerStyles,
  compact: compactDividerStyles
};
/**
 * TODO: Add JSDoc
 */
export const Divider = ({
  appearance,
  spacing,
  isDisabled = false
}) => {
  return (
    // I find it funny to provide a div for Divider
    jsx("div", {
      css: [baseDividerStyles, dividerHeight[spacing], isDisabled && (fg('platform-component-visual-refresh') ? dividerDisabledRefreshedStyles : dividerDisabledStyles), !isDisabled && dividerAppearance[appearance], fg('platform-component-visual-refresh') && dividerRefreshedOffsetStyles]
    })
  );
};
const splitButtonStyles = css({
  display: 'inline-flex',
  position: 'relative',
  alignItems: 'center',
  whiteSpace: 'nowrap'
});
const primaryButtonStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  'button,a': {
    borderEndEndRadius: 0,
    borderStartEndRadius: 0
  }
});
const secondaryButtonStyles = css({
  // eslint-disable-next-line @atlaskit/design-system/no-nested-styles, @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  'button,a': {
    borderEndStartRadius: 0,
    borderStartStartRadius: 0
  }
});
const defaultAppearanceContainerStyles = css({
  borderRadius: "var(--ds-border-radius, 3px)",
  outlineColor: "var(--ds-border, #091E4224)",
  outlineOffset: `calc(0px - ${"var(--ds-border-width, 1px)"})`,
  outlineStyle: 'solid',
  outlineWidth: "var(--ds-border-width, 1px)"
});

/**
 * TODO: Add JSdoc
 */
export const SplitButtonContainer = ({
  appearance,
  children,
  isDisabled = false
}) => {
  return jsx("div", {
    css: [appearance === 'default' && !isDisabled && fg('platform-component-visual-refresh') && defaultAppearanceContainerStyles, splitButtonStyles]
  }, children);
};

/**
 * __Split Button__
 *
 * A split button lets people perform an action or choose from a small group of similar actions.
 *
 * - [Examples](https://atlassian.design/components/button/split-button/examples)
 * - [Code](https://atlassian.design/components/button/split-button/code)
 * - [Usage](https://atlassian.design/components/button/split-button/usage)
 */
export const SplitButton = ({
  children,
  appearance = 'default',
  spacing = 'default',
  isDisabled = false
}) => {
  const {
    PrimaryAction,
    SecondaryAction
  } = getActions(children);
  return jsx(SplitButtonContainer, {
    appearance: appearance,
    isDisabled: isDisabled
  }, jsx(SplitButtonContext.Provider, {
    value: {
      appearance,
      spacing,
      isDisabled
    }
  }, jsx("div", {
    css: primaryButtonStyles
  }, PrimaryAction), jsx(Divider, {
    appearance: appearance,
    spacing: spacing,
    isDisabled: isDisabled
  }), jsx("div", {
    css: secondaryButtonStyles
  }, SecondaryAction)));
};
// TODO: Fill in the component {description} and ensure links point to the correct {packageName} location.
// Remove links that the component does not have (such as usage). If there are no links remove them all.
/**
 * __Split button with slots__
 *
 * A split button with slots {description}.
 *
 * - [Examples](https://atlassian.design/components/{packageName}/examples)
 * - [Code](https://atlassian.design/components/{packageName}/code)
 * - [Usage](https://atlassian.design/components/{packageName}/usage)
 */
export const SplitButtonWithSlots = ({
  primaryAction,
  secondaryAction,
  appearance = 'default',
  spacing = 'default',
  isDisabled = false
}) => {
  return jsx(SplitButtonContainer, {
    appearance: appearance,
    isDisabled: isDisabled
  }, jsx(SplitButtonContext.Provider, {
    value: {
      appearance,
      spacing,
      isDisabled
    }
  }, jsx("div", {
    css: primaryButtonStyles
  }, primaryAction), jsx(Divider, {
    appearance: appearance,
    spacing: spacing,
    isDisabled: isDisabled
  }), jsx("div", {
    css: secondaryButtonStyles
  }, secondaryAction)));
};